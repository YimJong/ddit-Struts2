package kr.or.ddit.admin.question.service;

import java.util.List;
import java.util.Map;

import kr.or.ddit.admin.question.dao.IQuestionDao;
import kr.or.ddit.admin.question.dao.QuestionDaoImpl;
import kr.or.ddit.vo.BoardVO;

public class QuestionServiceImpl implements IQuestionService{

	private IQuestionDao dao;
	private static QuestionServiceImpl service;
	
	private QuestionServiceImpl(){
		dao = QuestionDaoImpl.getInstance();
	}
	
	public static QuestionServiceImpl getInstance(){
		if(service==null){
			service = new QuestionServiceImpl();
		}
		return service;
	}
	
	
	@Override
	public List<BoardVO> getQuestionAll(Map<String, String> params) {
		try {
			return dao.getQuestionAll(params);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@Override
	public String insertQuestion(BoardVO insertQuestion) {
		String board_no = null;
		
		try {
			board_no = dao.insertQuestion(insertQuestion);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return board_no;
	}


	@Override
	public void deleteQuestion(BoardVO deleteQuestion) {
		try {
			dao.deleteQuestion(deleteQuestion);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void modifyQuestion(BoardVO boardVO) {
		try {
			dao.modifyQuestion(boardVO);
	      } catch (Exception e) {
	         e.printStackTrace();
	      }
	}

	@Override
	public List<BoardVO> searchConditionByQuesboard(BoardVO boardVO) {
		
		try {
			return dao.searchConditionByQuesboard(boardVO);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
		
	}

	@Override
	public BoardVO onlyQuestion(Map<String, String> params) {
		try {
			return dao.onlyQuestion(params);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public String totalCount(Map<String, String> params) {
		String totalCount = "";
		try {
			totalCount = dao.totalCount(params);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return totalCount;
	}

}
